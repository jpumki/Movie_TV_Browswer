{"ast":null,"code":"var _jsxFileName = \"/Users/jpumki/Documents/netflix/src/Routes/Search/SearchContainer.js\";\nimport React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { tvApi } from \"api\";\nimport { moviesApi } from \"api\";\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movieResults: null,\n      tvResults: null,\n      searchTerm: \"\",\n      loading: false,\n      error: null\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        searchTerm\n      } = this.state;\n\n      if (searchTerm !== \"\") {\n        this.searchByTerm();\n      }\n    };\n\n    this.updateTerm = event => {\n      const {\n        target: {\n          value\n        }\n      } = event;\n    };\n\n    this.searchByTerm = async () => {\n      const {\n        searchTerm\n      } = this.state;\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const {\n          data: {\n            results: movieResults\n          }\n        } = await moviesApi.search(searchTerm);\n        const {\n          data: {\n            results: tvResults\n          }\n        } = await tvApi.search(searchTerm);\n        this.setState({\n          movieResults,\n          tvResults\n        });\n      } catch {\n        this.setState({\n          error: \"Can't find results.\"\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      movieResults,\n      tvResults,\n      searchTerm,\n      loading,\n      error\n    } = this.state;\n    return /*#__PURE__*/React.createElement(SearchPresenter, {\n      movieResults: movieResults,\n      tvResults: tvResults,\n      searchTerm: searchTerm,\n      loading: loading,\n      error: error,\n      handleSubmit: this.handleSubmit,\n      updateTerm: this.updateTerm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jpumki/Documents/netflix/src/Routes/Search/SearchContainer.js"],"names":["React","SearchPresenter","tvApi","moviesApi","Component","state","movieResults","tvResults","searchTerm","loading","error","handleSubmit","event","preventDefault","searchByTerm","updateTerm","target","value","setState","data","results","search","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,KAAT,QAAsB,KAAtB;AACA,SAASC,SAAT,QAA0B,KAA1B;AAEA,eAAe,cAAcH,KAAK,CAACI,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CC,KAD2C,GACnC;AACNC,MAAAA,YAAY,EAAE,IADR;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,UAAU,EAAE,EAHN;AAINC,MAAAA,OAAO,EAAE,KAJH;AAKNC,MAAAA,KAAK,EAAE;AALD,KADmC;;AAAA,SAS3CC,YAT2C,GAS3BC,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAM;AAAEL,QAAAA;AAAF,UAAiB,KAAKH,KAA5B;;AACA,UAAIG,UAAU,KAAK,EAAnB,EAAuB;AACrB,aAAKM,YAAL;AACD;AACF,KAf0C;;AAAA,SAiB3CC,UAjB2C,GAiB7BH,KAAD,IAAW;AACtB,YAAM;AACJI,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF;AADJ,UAEFL,KAFJ;AAGD,KArB0C;;AAAA,SAuB3CE,YAvB2C,GAuB5B,YAAY;AACzB,YAAM;AAAEN,QAAAA;AAAF,UAAiB,KAAKH,KAA5B;AACA,WAAKa,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,UAAI;AACF,cAAM;AACJU,UAAAA,IAAI,EAAE;AAAEC,YAAAA,OAAO,EAAEd;AAAX;AADF,YAEF,MAAMH,SAAS,CAACkB,MAAV,CAAiBb,UAAjB,CAFV;AAGA,cAAM;AACJW,UAAAA,IAAI,EAAE;AAAEC,YAAAA,OAAO,EAAEb;AAAX;AADF,YAEF,MAAML,KAAK,CAACmB,MAAN,CAAab,UAAb,CAFV;AAGA,aAAKU,QAAL,CAAc;AACZZ,UAAAA,YADY;AAEZC,UAAAA;AAFY,SAAd;AAID,OAXD,CAWE,MAAM;AACN,aAAKW,QAAL,CAAc;AAAER,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OAbD,SAaU;AACR,aAAKQ,QAAL,CAAc;AAAET,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;AACF,KA1C0C;AAAA;;AA4C3Ca,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA,YAAF;AAAgBC,MAAAA,SAAhB;AAA2BC,MAAAA,UAA3B;AAAuCC,MAAAA,OAAvC;AAAgDC,MAAAA;AAAhD,QAA0D,KAAKL,KAArE;AACA,wBACE,oBAAC,eAAD;AACE,MAAA,YAAY,EAAEC,YADhB;AAEE,MAAA,SAAS,EAAEC,SAFb;AAGE,MAAA,UAAU,EAAEC,UAHd;AAIE,MAAA,OAAO,EAAEC,OAJX;AAKE,MAAA,KAAK,EAAEC,KALT;AAME,MAAA,YAAY,EAAE,KAAKC,YANrB;AAOE,MAAA,UAAU,EAAE,KAAKI,UAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AAzD0C","sourcesContent":["import React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { tvApi } from \"api\";\nimport { moviesApi } from \"api\";\n\nexport default class extends React.Component {\n  state = {\n    movieResults: null,\n    tvResults: null,\n    searchTerm: \"\",\n    loading: false,\n    error: null,\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { searchTerm } = this.state;\n    if (searchTerm !== \"\") {\n      this.searchByTerm();\n    }\n  };\n\n  updateTerm = (event) => {\n    const {\n      target: { value },\n    } = event;\n  };\n\n  searchByTerm = async () => {\n    const { searchTerm } = this.state;\n    this.setState({ loading: true });\n    try {\n      const {\n        data: { results: movieResults },\n      } = await moviesApi.search(searchTerm);\n      const {\n        data: { results: tvResults },\n      } = await tvApi.search(searchTerm);\n      this.setState({\n        movieResults,\n        tvResults,\n      });\n    } catch {\n      this.setState({ error: \"Can't find results.\" });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\n    return (\n      <SearchPresenter\n        movieResults={movieResults}\n        tvResults={tvResults}\n        searchTerm={searchTerm}\n        loading={loading}\n        error={error}\n        handleSubmit={this.handleSubmit}\n        updateTerm={this.updateTerm}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}