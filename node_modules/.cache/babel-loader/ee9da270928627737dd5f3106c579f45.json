{"ast":null,"code":"var _jsxFileName = \"/Users/jpumki/Documents/netflix/src/Routes/Search/SearchContainer.js\";\nimport React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { tvApi } from \"api\";\nimport { moviesApi } from \"api\";\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movieResults: null,\n      tvResults: null,\n      searchTerm: \"code\",\n      loading: false,\n      error: null\n    };\n\n    this.handleSubmit = () => {\n      const {\n        serachTerm\n      } = this.state;\n\n      if (serachTerm !== \"\") {\n        this.searchByTerm();\n      }\n    };\n\n    this.searchByTerm = async () => {\n      const {\n        serachTerm\n      } = this.State;\n\n      try {\n        const movieResults = await moviesApi.search(searchTerm);\n        const showResults = await tvApi.search(searchTerm);\n        this.setState({\n          loading: true\n        });\n      } catch {\n        this.setState({\n          error: \"Can't find results.\"\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.handleSubmit();\n  }\n\n  render() {\n    const {\n      movieResults,\n      tvResults,\n      searchTerm,\n      loading,\n      error\n    } = this.state;\n    return /*#__PURE__*/React.createElement(SearchPresenter, {\n      movieResults: movieResults,\n      tvResults: tvResults,\n      searchTerm: searchTerm,\n      loading: loading,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jpumki/Documents/netflix/src/Routes/Search/SearchContainer.js"],"names":["React","SearchPresenter","tvApi","moviesApi","Component","state","movieResults","tvResults","searchTerm","loading","error","handleSubmit","serachTerm","searchByTerm","State","search","showResults","setState","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,KAAT,QAAsB,KAAtB;AACA,SAASC,SAAT,QAA0B,KAA1B;AAEA,eAAe,cAAcH,KAAK,CAACI,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CC,KAD2C,GACnC;AACNC,MAAAA,YAAY,EAAE,IADR;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,UAAU,EAAE,MAHN;AAINC,MAAAA,OAAO,EAAE,KAJH;AAKNC,MAAAA,KAAK,EAAE;AALD,KADmC;;AAAA,SAa3CC,YAb2C,GAa5B,MAAM;AACnB,YAAM;AAAEC,QAAAA;AAAF,UAAiB,KAAKP,KAA5B;;AACA,UAAIO,UAAU,KAAK,EAAnB,EAAuB;AACrB,aAAKC,YAAL;AACD;AACF,KAlB0C;;AAAA,SAoB3CA,YApB2C,GAoB5B,YAAY;AACzB,YAAM;AAAED,QAAAA;AAAF,UAAiB,KAAKE,KAA5B;;AACA,UAAI;AACF,cAAMR,YAAY,GAAG,MAAMH,SAAS,CAACY,MAAV,CAAiBP,UAAjB,CAA3B;AACA,cAAMQ,WAAW,GAAG,MAAMd,KAAK,CAACa,MAAN,CAAaP,UAAb,CAA1B;AACA,aAAKS,QAAL,CAAc;AAAER,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD,OAJD,CAIE,MAAM;AACN,aAAKQ,QAAL,CAAc;AAAEP,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OAND,SAMU;AACR,aAAKO,QAAL,CAAc;AAAER,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;AACF,KA/B0C;AAAA;;AAS3CS,EAAAA,iBAAiB,GAAG;AAClB,SAAKP,YAAL;AACD;;AAsBDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEb,MAAAA,YAAF;AAAgBC,MAAAA,SAAhB;AAA2BC,MAAAA,UAA3B;AAAuCC,MAAAA,OAAvC;AAAgDC,MAAAA;AAAhD,QAA0D,KAAKL,KAArE;AACA,wBACE,oBAAC,eAAD;AACE,MAAA,YAAY,EAAEC,YADhB;AAEE,MAAA,SAAS,EAAEC,SAFb;AAGE,MAAA,UAAU,EAAEC,UAHd;AAIE,MAAA,OAAO,EAAEC,OAJX;AAKE,MAAA,KAAK,EAAEC,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AA5C0C","sourcesContent":["import React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { tvApi } from \"api\";\nimport { moviesApi } from \"api\";\n\nexport default class extends React.Component {\n  state = {\n    movieResults: null,\n    tvResults: null,\n    searchTerm: \"code\",\n    loading: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    this.handleSubmit();\n  }\n\n  handleSubmit = () => {\n    const { serachTerm } = this.state;\n    if (serachTerm !== \"\") {\n      this.searchByTerm();\n    }\n  };\n\n  searchByTerm = async () => {\n    const { serachTerm } = this.State;\n    try {\n      const movieResults = await moviesApi.search(searchTerm);\n      const showResults = await tvApi.search(searchTerm);\n      this.setState({ loading: true });\n    } catch {\n      this.setState({ error: \"Can't find results.\" });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\n    return (\n      <SearchPresenter\n        movieResults={movieResults}\n        tvResults={tvResults}\n        searchTerm={searchTerm}\n        loading={loading}\n        error={error}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}